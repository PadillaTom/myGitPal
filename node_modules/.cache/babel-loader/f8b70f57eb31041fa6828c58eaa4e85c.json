{"ast":null,"code":"var _jsxFileName = \"/Users/padillatom/PadillaTom/Tomas/Programacion/Portfolio Projects/myGitPal/src/Components/Repos Related/Repos.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport styled from \"styled-components\";\nimport { GithubContext } from \"../../Context/UserContext\";\nimport { ExampleChart, Pie3D, Column3D, Bar3D, Doughnut2D } from \"../Charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Repos = () => {\n  _s();\n\n  const {\n    repos\n  } = useContext(GithubContext); // Reduce to get Languages Only\n\n  let languages = repos.reduce((total, item) => {\n    // Destructure language for every item iterated:\n    const {\n      language\n    } = item; // If Language == null: Return my object\n\n    if (!language) return total; // *** Creating Key-Value Object for each language ***\n    // {Label: languageName, Value: quantity}\n    // Language DOES NOT EXIST: Create it, Value 1       \n\n    if (!total[language]) {\n      total[language] = {\n        label: language,\n        value: 1\n      };\n    } // Language EXISTS: Keep Label, Add + 1 to the previous value\n    else {\n        total[language] = { ...total[language],\n          value: total[language].value + 1\n        };\n      }\n\n    return total;\n  }, {}); // Transform LANGUAGES to an Array of Objects: Using languages values {label, value}\n  // SORT it, to keep the most used to the Top\n  // SLICE to get top 5.\n\n  languages = Object.values(languages).sort((a, b) => {\n    return b.value - a.value;\n  }).slice(0, 5);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"section\",\n    children: /*#__PURE__*/_jsxDEV(Wrapper, {\n      className: \"section-center\",\n      children: /*#__PURE__*/_jsxDEV(Pie3D, {\n        data: languages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}; // Styled Components\n\n\n_s(Repos, \"/OjU7c9RRUOdfOk9GO886tkXsMA=\");\n\n_c = Repos;\nconst Wrapper = styled.div`\ndisplay: grid;\njustify-items: center;\ngap: 1rem;\n\n/* Chart */\ndiv{\n  width: 100% !important;  \n  box-shadow: 0px 0px 10px var(--ShadowSmooth);\n  border-radius: 0.5rem !important; \n}\n.fusioncharts-container{\n  width: 100% !important;\n}\nsvg{\n  width: 100% !important;\n}\n\n\n`;\n_c2 = Wrapper;\nexport default Repos;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Repos\");\n$RefreshReg$(_c2, \"Wrapper\");","map":{"version":3,"sources":["/Users/padillatom/PadillaTom/Tomas/Programacion/Portfolio Projects/myGitPal/src/Components/Repos Related/Repos.js"],"names":["React","useContext","styled","GithubContext","ExampleChart","Pie3D","Column3D","Bar3D","Doughnut2D","Repos","repos","languages","reduce","total","item","language","label","value","Object","values","sort","a","b","slice","Wrapper","div"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAAQC,aAAR,QAA4B,2BAA5B;AACA,SAAQC,YAAR,EAAsBC,KAAtB,EAA6BC,QAA7B,EAAuCC,KAAvC,EAA8CC,UAA9C,QAA+D,WAA/D;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAChB,QAAM;AAACC,IAAAA;AAAD,MAAUT,UAAU,CAACE,aAAD,CAA1B,CADgB,CAGpB;;AACI,MAAIQ,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAa,CAACC,KAAD,EAAQC,IAAR,KAAe;AAC1C;AACA,UAAM;AAACC,MAAAA;AAAD,QAAaD,IAAnB,CAF0C,CAG1C;;AACA,QAAI,CAACC,QAAL,EAAe,OAAOF,KAAP,CAJ2B,CAM1C;AACA;AAEA;;AACA,QAAG,CAACA,KAAK,CAACE,QAAD,CAAT,EAAqB;AACnBF,MAAAA,KAAK,CAACE,QAAD,CAAL,GAAkB;AAACC,QAAAA,KAAK,EAAED,QAAR;AAAkBE,QAAAA,KAAK,EAAE;AAAzB,OAAlB;AACD,KAFD,CAGA;AAHA,SAIK;AACHJ,QAAAA,KAAK,CAACE,QAAD,CAAL,GAAkB,EAAC,GAAGF,KAAK,CAACE,QAAD,CAAT;AAAqBE,UAAAA,KAAK,EAAEJ,KAAK,CAACE,QAAD,CAAL,CAAgBE,KAAhB,GAAwB;AAApD,SAAlB;AACD;;AACD,WAAOJ,KAAP;AACD,GAlBe,EAkBd,EAlBc,CAAhB,CAJgB,CAwBpB;AACA;AACA;;AACIF,EAAAA,SAAS,GAAGO,MAAM,CAACC,MAAP,CAAcR,SAAd,EAAyBS,IAAzB,CAA8B,CAACC,CAAD,EAAGC,CAAH,KAAO;AAC/C,WAAOA,CAAC,CAACL,KAAF,GAAUI,CAAC,CAACJ,KAAnB;AACD,GAFW,EAETM,KAFS,CAEH,CAFG,EAED,CAFC,CAAZ;AAIA,sBACI;AAAS,IAAA,SAAS,EAAC,SAAnB;AAAA,2BACI,QAAC,OAAD;AAAS,MAAA,SAAS,EAAC,gBAAnB;AAAA,6BAEI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAEZ;AAAb;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAvCD,C,CAyCA;;;GAzCMF,K;;KAAAA,K;AA0CN,MAAMe,OAAO,GAAGtB,MAAM,CAACuB,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBA;MAAMD,O;AAqBN,eAAef,KAAf","sourcesContent":["import React, {useContext} from 'react'\nimport styled from \"styled-components\"\n\nimport {GithubContext} from \"../../Context/UserContext\"\nimport {ExampleChart, Pie3D, Column3D, Bar3D, Doughnut2D} from \"../Charts\"\n\nconst Repos = () => {\n    const {repos} = useContext(GithubContext);\n\n// Reduce to get Languages Only\n    let languages = repos.reduce((total, item)=>{\n      // Destructure language for every item iterated:\n      const {language} = item;\n      // If Language == null: Return my object\n      if (!language) return total;\n\n      // *** Creating Key-Value Object for each language ***\n      // {Label: languageName, Value: quantity}\n\n      // Language DOES NOT EXIST: Create it, Value 1       \n      if(!total[language]) {\n        total[language] = {label: language, value: 1};\n      } \n      // Language EXISTS: Keep Label, Add + 1 to the previous value\n      else {\n        total[language] = {...total[language], value: total[language].value + 1};\n      }\n      return total\n    },{})\n\n// Transform LANGUAGES to an Array of Objects: Using languages values {label, value}\n// SORT it, to keep the most used to the Top\n// SLICE to get top 5.\n    languages = Object.values(languages).sort((a,b)=>{\n      return b.value - a.value;\n    }).slice(0,5);\n\n    return (\n        <section className=\"section\">\n            <Wrapper className=\"section-center\">\n                {/* <ExampleChart data={chartData}></ExampleChart> */}\n                <Pie3D data={languages}></Pie3D>\n            </Wrapper>\n        </section>\n    )\n}\n\n// Styled Components\nconst Wrapper = styled.div`\ndisplay: grid;\njustify-items: center;\ngap: 1rem;\n\n/* Chart */\ndiv{\n  width: 100% !important;  \n  box-shadow: 0px 0px 10px var(--ShadowSmooth);\n  border-radius: 0.5rem !important; \n}\n.fusioncharts-container{\n  width: 100% !important;\n}\nsvg{\n  width: 100% !important;\n}\n\n\n`\n\nexport default Repos\n"]},"metadata":{},"sourceType":"module"}