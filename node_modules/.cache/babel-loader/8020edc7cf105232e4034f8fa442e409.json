{"ast":null,"code":"var _jsxFileName = \"/Users/padillatom/PadillaTom/Tomas/Programacion/Portfolio/Portfolio Projects/myGitPal/src/Components/Repos Related/Repos.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport styled from \"styled-components\";\nimport { GithubContext } from \"../../Context/UserContext\";\nimport { ExampleChart, Pie3D, Column3D, Bar3D, Doughnut2D } from \"../Charts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Repos = () => {\n  _s();\n\n  const {\n    repos\n  } = useContext(GithubContext); // Reduce to get Languages Only\n\n  const languages = repos.reduce((total, item) => {\n    // Destructure every SingleRepo\n    const {\n      language,\n      stargazers_count\n    } = item; // If Language == null: Return my object\n\n    if (!language) return total; // *** Creating Key-Value Object for each language ***\n    // {Label: languageName, Value: quantity}\n    // Language DOES NOT EXIST: Create it, Value 1       \n\n    if (!total[language]) {\n      total[language] = {\n        label: language,\n        value: 1,\n        stars: stargazers_count\n      };\n    } // Language EXISTS: Keep Label, Add + 1 to the previous value\n    else {\n        total[language] = { ...total[language],\n          value: total[language].value + 1,\n          stars: total[language].stars + stargazers_count\n        };\n      }\n\n    return total;\n  }, {}); // *** Languages ***  \n  // Transform LANGUAGES to an Array of Objects: Using languages values {label, value}\n  // SORT it, to keep the most used to the Top\n  // SLICE to get top 5.\n\n  const mostUsed = Object.values(languages).sort((a, b) => {\n    return b.value - a.value;\n  }).slice(0, 5); // *** Stars ***\n\n  const mostPopular = Object.values(languages).sort((a, b) => {\n    return b.stars - a.stars;\n  }).map(item => {\n    return { ...item,\n      value: item.stars\n    };\n  }).slice(0, 5); // *** Stars and Forks ***\n\n  let {\n    stars,\n    forks\n  } = repos.reduce((total, item) => {\n    const {\n      stargazers_count,\n      name,\n      forks\n    } = item;\n    total.stars[stargazers_count] = {\n      label: name,\n      value: stargazers_count\n    };\n    return total;\n  }, {\n    stars: {},\n    forks: {}\n  });\n  console.log(stars); // *** ChartData ***\n\n  const chartData = [{\n    label: \"July\",\n    value: \"80\"\n  }, {\n    label: \"Tom\",\n    value: \"100\"\n  }, {\n    label: \"Katy\",\n    value: \"25\"\n  }]; // *** Main ***\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"section\",\n    children: /*#__PURE__*/_jsxDEV(Wrapper, {\n      className: \"section-center\",\n      children: [/*#__PURE__*/_jsxDEV(Pie3D, {\n        data: mostUsed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Column3D, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Doughnut2D, {\n        data: mostPopular\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Bar3D, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}; // Styled Components\n\n\n_s(Repos, \"/OjU7c9RRUOdfOk9GO886tkXsMA=\");\n\n_c = Repos;\nconst Wrapper = styled.div`\ndisplay: grid;\njustify-items: center;\ngap: 1rem;\n\n/* Chart */\ndiv{\n  width: 100% !important;  \n  box-shadow: 0px 0px 10px var(--ShadowSmooth);  \n}\n.fusioncharts-container{\n  width: 100% !important;\n}\nsvg{\n  width: 100% !important;\n}\n`;\n_c2 = Wrapper;\nexport default Repos;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Repos\");\n$RefreshReg$(_c2, \"Wrapper\");","map":{"version":3,"sources":["/Users/padillatom/PadillaTom/Tomas/Programacion/Portfolio/Portfolio Projects/myGitPal/src/Components/Repos Related/Repos.js"],"names":["React","useContext","styled","GithubContext","ExampleChart","Pie3D","Column3D","Bar3D","Doughnut2D","Repos","repos","languages","reduce","total","item","language","stargazers_count","label","value","stars","mostUsed","Object","values","sort","a","b","slice","mostPopular","map","forks","name","console","log","chartData","Wrapper","div"],"mappings":"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","sourcesContent":["import React, {useContext} from 'react'\nimport styled from \"styled-components\"\n\nimport {GithubContext} from \"../../Context/UserContext\"\nimport {ExampleChart, Pie3D, Column3D, Bar3D, Doughnut2D} from \"../Charts\"\n\nconst Repos = () => {\n    const {repos} = useContext(GithubContext);\n\n// Reduce to get Languages Only\n    const languages = repos.reduce((total, item)=>{\n      // Destructure every SingleRepo\n      const {language, stargazers_count} = item;\n\n      // If Language == null: Return my object\n      if (!language) return total;\n      // *** Creating Key-Value Object for each language ***\n      // {Label: languageName, Value: quantity}\n\n      // Language DOES NOT EXIST: Create it, Value 1       \n      if(!total[language]) {\n        total[language] = {label: language, value: 1, stars: stargazers_count};\n      } \n      // Language EXISTS: Keep Label, Add + 1 to the previous value\n      else {\n        total[language] = { \n          ...total[language], \n          value: total[language].value + 1,\n          stars: total[language].stars + stargazers_count,\n        };\n      }\n      return total\n    },{})    \n\n// *** Languages ***  \n// Transform LANGUAGES to an Array of Objects: Using languages values {label, value}\n// SORT it, to keep the most used to the Top\n// SLICE to get top 5.\n    const mostUsed = Object.values(languages).sort((a,b)=>{\n      return b.value - a.value;\n    }).slice(0,5);\n\n// *** Stars ***\nconst mostPopular = Object.values(languages).sort((a,b)=>{\n  return b.stars - a.stars;  \n}).map((item)=>{\n  return {...item, value: item.stars}\n}).slice(0,5);\n\n// *** Stars and Forks ***\nlet {stars, forks} = repos.reduce((total, item)=>{\n  const {stargazers_count,name, forks} = item;\n  total.stars[stargazers_count] = {label: name, value: stargazers_count};\n  return total\n},{\n  stars: {},\n  forks: {}\n})\nconsole.log(stars);\n// *** ChartData ***\nconst chartData = [\n  {\n    label: \"July\",\n    value: \"80\",\n  },\n  {\n    label: \"Tom\",\n    value: \"100\",\n  },\n  {\n    label: \"Katy\",\n    value: \"25\",\n  },\n]\n\n// *** Main ***\n    return (\n        <section className=\"section\">\n            <Wrapper className=\"section-center\">\n                {/* <ExampleChart data={chartData}></ExampleChart> */}\n                <Pie3D data={mostUsed}></Pie3D>\n                <Column3D data={chartData}></Column3D>\n                <Doughnut2D data={mostPopular}></Doughnut2D>\n                <Bar3D data={chartData}></Bar3D>                \n            </Wrapper>\n        </section>\n    )\n}\n\n// Styled Components\nconst Wrapper = styled.div`\ndisplay: grid;\njustify-items: center;\ngap: 1rem;\n\n/* Chart */\ndiv{\n  width: 100% !important;  \n  box-shadow: 0px 0px 10px var(--ShadowSmooth);  \n}\n.fusioncharts-container{\n  width: 100% !important;\n}\nsvg{\n  width: 100% !important;\n}\n`\n\nexport default Repos\n"]},"metadata":{},"sourceType":"module"}